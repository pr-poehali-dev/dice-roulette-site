
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { CasinoHeader } from "@/components/CasinoHeader";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
interface PromoCode {
  id: string;
  code: string;
  type: "bonus" | "balance";
  amount: number;
  wagerMultiplier: number;
  usageLimit: number;
  usageCount: number;
  createdAt: Date;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
interface Transaction {
  id: string;
  type: "deposit" | "withdraw" | "game" | "bonus";
  amount: number;
  status: "pending" | "completed" | "failed";
  email: string;
  createdAt: Date;
  details?: string;
}

// –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const initialPromoCodes: PromoCode[] = [
  {
    id: "promo1",
    code: "WELCOME2025",
    type: "bonus",
    amount: 1500,
    wagerMultiplier: 20,
    usageLimit: 1000,
    usageCount: 152,
    createdAt: new Date(2025, 0, 1)
  },
  {
    id: "promo2",
    code: "DICE100",
    type: "balance",
    amount: 100,
    wagerMultiplier: 0,
    usageLimit: 500,
    usageCount: 211,
    createdAt: new Date(2025, 1, 15)
  },
  {
    id: "promo3",
    code: "FREESPIN",
    type: "bonus",
    amount: 500,
    wagerMultiplier: 15,
    usageLimit: 300,
    usageCount: 89,
    createdAt: new Date(2025, 2, 10)
  }
];

const initialTransactions: Transaction[] = [
  {
    id: "tx1",
    type: "deposit",
    amount: 1500,
    status: "completed",
    email: "user@example.com",
    createdAt: new Date(2025, 3, 20),
    details: "–ÆMoney: 4100116342286505"
  },
  {
    id: "tx2",
    type: "game",
    amount: -500,
    status: "completed",
    email: "user@example.com",
    createdAt: new Date(2025, 3, 20),
    details: "Dice: –°—Ç–∞–≤–∫–∞ 500, —à–∞–Ω—Å 50%"
  },
  {
    id: "tx3",
    type: "game",
    amount: 1200,
    status: "completed",
    email: "user@example.com",
    createdAt: new Date(2025, 3, 20),
    details: "Dice: –í—ã–∏–≥—Ä—ã—à x2.4"
  },
  {
    id: "tx4",
    type: "withdraw",
    amount: -1000,
    status: "pending",
    email: "user@example.com",
    createdAt: new Date(2025, 3, 21),
    details: "–ö–∞—Ä—Ç–∞: **** **** **** 1234"
  },
  {
    id: "tx5",
    type: "bonus",
    amount: 1500,
    status: "completed",
    email: "admin@dice.com",
    createdAt: new Date(2025, 3, 19),
    details: "–ü—Ä–æ–º–æ–∫–æ–¥: WELCOME2025"
  }
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
const statsData = {
  totalUsers: 1248,
  activeUsers: 423,
  totalDeposits: 2895120,
  totalWithdrawals: 1542800,
  profitToday: 98750,
  profitWeek: 325400,
  profitMonth: 1352300,
  gameCount: 15240
};

const Admin = () => {
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [isAdmin, setIsAdmin] = useState(false);
  const [userEmail, setUserEmail] = useState("");
  const [promoCodes, setPromoCodes] = useState<PromoCode[]>(initialPromoCodes);
  const [transactions, setTransactions] = useState<Transaction[]>(initialTransactions);
  const [newPromoCode, setNewPromoCode] = useState({
    code: "",
    type: "bonus",
    amount: 100,
    wagerMultiplier: 10,
    usageLimit: 100
  });
  const [promoError, setPromoError] = useState("");
  const [promoSuccess, setPromoSuccess] = useState("");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const isAdminUser = localStorage.getItem("isAdmin") === "true";
    const email = localStorage.getItem("userEmail");
    
    setIsAdmin(isAdminUser);
    
    if (email) {
      setUserEmail(email);
    }
    
    // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    if (!isAdminUser) {
      navigate("/");
    }
  }, [navigate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
  const handleLogout = () => {
    localStorage.removeItem("userEmail");
    localStorage.removeItem("isAdmin");
    navigate("/");
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const handleCreatePromoCode = () => {
    if (!newPromoCode.code.trim()) {
      setPromoError("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞");
      return;
    }

    if (newPromoCode.amount <= 0) {
      setPromoError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    if (promoCodes.some(promo => promo.code === newPromoCode.code.toUpperCase())) {
      setPromoError("–ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    const newPromo: PromoCode = {
      id: `promo${Date.now()}`,
      code: newPromoCode.code.toUpperCase(),
      type: newPromoCode.type as "bonus" | "balance",
      amount: newPromoCode.amount,
      wagerMultiplier: newPromoCode.type === "bonus" ? newPromoCode.wagerMultiplier : 0,
      usageLimit: newPromoCode.usageLimit,
      usageCount: 0,
      createdAt: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
    setPromoCodes([newPromo, ...promoCodes]);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    setNewPromoCode({
      code: "",
      type: "bonus",
      amount: 100,
      wagerMultiplier: 10,
      usageLimit: 100
    });
    setPromoError("");
    setPromoSuccess(`–ü—Ä–æ–º–æ–∫–æ–¥ ${newPromo.code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setPromoSuccess("");
    }, 3000);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  return (
    <div className="min-h-screen bg-[#1A1F2C] text-white">
      <CasinoHeader 
        balance={0}
        bonusBalance={0}
        onDepositClick={() => {}}
        onWithdrawClick={() => {}}
        onPromoClick={() => {}}
        onLoginClick={() => {}}
        isLoggedIn={true}
        userEmail={userEmail}
        isAdmin={isAdmin}
        onLogout={handleLogout}
      />
      
      <main className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-2xl font-bold">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
          <div className="text-sm text-gray-400">
            <span className="mr-2">üü¢ Online:</span>
            <span className="font-medium">{statsData.activeUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</span>
          </div>
        </div>
        
        <Tabs defaultValue="dashboard" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="dashboard">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</TabsTrigger>
            <TabsTrigger value="promocodes">–ü—Ä–æ–º–æ–∫–æ–¥—ã</TabsTrigger>
            <TabsTrigger value="transactions">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</TabsTrigger>
          </TabsList>
          
          {/* –í–∫–ª–∞–¥–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π */}
          <TabsContent value="dashboard">
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
              <Card className="bg-[#222] border-gray-700">
                <CardHeader className="pb-2">
                  <CardDescription>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</CardDescription>
                  <CardTitle className="text-2xl">{statsData.totalUsers}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-xs text-gray-400">
                    –ê–∫—Ç–∏–≤–Ω—ã—Ö: {statsData.activeUsers} ({Math.round(statsData.activeUsers / statsData.totalUsers * 100)}%)
                  </p>
                </CardContent>
              </Card>
              
              <Card className="bg-[#222] border-gray-700">
                <CardHeader className="pb-2">
                  <CardDescription>–û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç</CardDescription>
                  <CardTitle className="text-2xl">{statsData.totalDeposits.toLocaleString()} ‚ÇΩ</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-xs text-gray-400">
                    –í—ã–≤–æ–¥–æ–≤: {statsData.totalWithdrawals.toLocaleString()} ‚ÇΩ
                  </p>
                </CardContent>
              </Card>
              
              <Card className="bg-[#222] border-gray-700">
                <CardHeader className="pb-2">
                  <CardDescription>–ü—Ä–æ—Ñ–∏—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è</CardDescription>
                  <CardTitle className="text-2xl text-green-500">+{statsData.profitToday.toLocaleString()} ‚ÇΩ</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-xs text-gray-400">
                    –ó–∞ –Ω–µ–¥–µ–ª—é: {statsData.profitWeek.toLocaleString()} ‚ÇΩ
                  </p>
                </CardContent>
              </Card>
              
              <Card className="bg-[#222] border-gray-700">
                <CardHeader className="pb-2">
                  <CardDescription>–í—Å–µ–≥–æ –∏–≥—Ä</CardDescription>
                  <CardTitle className="text-2xl">{statsData.gameCount.toLocaleString()}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-xs text-gray-400">
                    –ü—Ä–æ—Ñ–∏—Ç –≤ –º–µ—Å—è—Ü: {statsData.profitMonth.toLocaleString()} ‚ÇΩ
                  </p>
                </CardContent>
              </Card>
            </div>
            
            <div className="mt-8">
              <h2 className="text-xl font-bold mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h2>
              <div className="bg-[#222] rounded-lg overflow-hidden">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>ID</TableHead>
                      <TableHead>–¢–∏–ø</TableHead>
                      <TableHead>–°—É–º–º–∞</TableHead>
                      <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                      <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                      <TableHead>–î–∞—Ç–∞</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {transactions.slice(0, 5).map((tx) => (
                      <TableRow key={tx.id}>
                        <TableCell className="font-mono text-xs">{tx.id}</TableCell>
                        <TableCell>
                          {tx.type === "deposit" && <span className="text-green-500">–î–µ–ø–æ–∑–∏—Ç</span>}
                          {tx.type === "withdraw" && <span className="text-red-500">–í—ã–≤–æ–¥</span>}
                          {tx.type === "game" && <span className="text-blue-500">–ò–≥—Ä–∞</span>}
                          {tx.type === "bonus" && <span className="text-purple-500">–ë–æ–Ω—É—Å</span>}
                        </TableCell>
                        <TableCell className={tx.amount > 0 ? "text-green-500" : "text-red-500"}>
                          {tx.amount > 0 ? "+" : ""}{tx.amount} ‚ÇΩ
                        </TableCell>
                        <TableCell>{tx.email}</TableCell>
                        <TableCell>
                          {tx.status === "completed" && <span className="text-green-500">–í—ã–ø–æ–ª–Ω–µ–Ω</span>}
                          {tx.status === "pending" && <span className="text-yellow-500">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>}
                          {tx.status === "failed" && <span className="text-red-500">–û—à–∏–±–∫–∞</span>}
                        </TableCell>
                        <TableCell>{formatDate(tx.createdAt)}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          </TabsContent>
          
          {/* –í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ */}
          <TabsContent value="promocodes">
            <div className="grid gap-6 md:grid-cols-2">
              <Card className="bg-[#222] border-gray-700">
                <CardHeader>
                  <CardTitle>–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</CardTitle>
                  <CardDescription>
                    –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {promoError && (
                    <Alert variant="destructive" className="mb-4">
                      <AlertDescription>{promoError}</AlertDescription>
                    </Alert>
                  )}
                  
                  {promoSuccess && (
                    <Alert className="mb-4 bg-green-900 border-green-700">
                      <AlertDescription>{promoSuccess}</AlertDescription>
                    </Alert>
                  )}
                  
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="promo-code">–ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞</Label>
                      <Input
                        id="promo-code"
                        placeholder="SUMMER2025"
                        value={newPromoCode.code}
                        onChange={(e) => setNewPromoCode({...newPromoCode, code: e.target.value})}
                        className="bg-[#333] mt-1"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="promo-type">–¢–∏–ø</Label>
                      <Select 
                        value={newPromoCode.type} 
                        onValueChange={(value) => setNewPromoCode({...newPromoCode, type: value})}
                      >
                        <SelectTrigger className="w-full bg-[#333] mt-1">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="bonus">–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å</SelectItem>
                          <SelectItem value="balance">–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label htmlFor="promo-amount">–°—É–º–º–∞ (‚ÇΩ)</Label>
                      <Input
                        id="promo-amount"
                        type="number"
                        min="1"
                        placeholder="100"
                        value={newPromoCode.amount}
                        onChange={(e) => setNewPromoCode({...newPromoCode, amount: Number(e.target.value)})}
                        className="bg-[#333] mt-1"
                      />
                    </div>
                    
                    {newPromoCode.type === "bonus" && (
                      <div>
                        <Label htmlFor="promo-wager">–í–µ–π–¥–∂–µ—Ä (—Ö)</Label>
                        <Input
                          id="promo-wager"
                          type="number"
                          min="0"
                          placeholder="20"
                          value={newPromoCode.wagerMultiplier}
                          onChange={(e) => setNewPromoCode({...newPromoCode, wagerMultiplier: Number(e.target.value)})}
                          className="bg-[#333] mt-1"
                        />
                      </div>
                    )}
                    
                    <div>
                      <Label htmlFor="promo-limit">–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π</Label>
                      <Input
                        id="promo-limit"
                        type="number"
                        min="1"
                        placeholder="100"
                        value={newPromoCode.usageLimit}
                        onChange={(e) => setNewPromoCode({...newPromoCode, usageLimit: Number(e.target.value)})}
                        className="bg-[#333] mt-1"
                      />
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button 
                    onClick={handleCreatePromoCode}
                    className="w-full bg-purple-700 hover:bg-purple-800"
                  >
                    –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                  </Button>
                </CardFooter>
              </Card>
              
              <div>
                <h2 className="text-xl font-bold mb-4">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã</h2>
                <div className="bg-[#222] rounded-lg overflow-hidden">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ö–æ–¥</TableHead>
                        <TableHead>–¢–∏–ø</TableHead>
                        <TableHead>–°—É–º–º–∞</TableHead>
                        <TableHead>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</TableHead>
                        <TableHead>–°–æ–∑–¥–∞–Ω</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {promoCodes.map((promo) => (
                        <TableRow key={promo.id}>
                          <TableCell className="font-medium">{promo.code}</TableCell>
                          <TableCell>
                            {promo.type === "bonus" ? (
                              <span className="text-purple-400">–ë–æ–Ω—É—Å</span>
                            ) : (
                              <span className="text-green-500">–ë–∞–ª–∞–Ω—Å</span>
                            )}
                          </TableCell>
                          <TableCell>
                            {promo.amount} ‚ÇΩ
                            {promo.type === "bonus" && promo.wagerMultiplier > 0 && (
                              <span className="text-xs text-gray-400"> (x{promo.wagerMultiplier})</span>
                            )}
                          </TableCell>
                          <TableCell>
                            <span className={promo.usageCount >= promo.usageLimit ? "text-red-500" : "text-gray-300"}>
                              {promo.usageCount} / {promo.usageLimit}
                            </span>
                          </TableCell>
                          <TableCell>{formatDate(promo.createdAt)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            </div>
          </TabsContent>
          
          {/* –í–∫–ª–∞–¥–∫–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ */}
          <TabsContent value="transactions">
            <div className="bg-[#222] rounded-lg overflow-hidden">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>–¢–∏–ø</TableHead>
                    <TableHead>–°—É–º–º–∞</TableHead>
                    <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                    <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                    <TableHead>–î–∞—Ç–∞</TableHead>
                    <TableHead>–î–µ—Ç–∞–ª–∏</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {transactions.map((tx) => (
                    <TableRow key={tx.id}>
                      <TableCell className="font-mono text-xs">{tx.id}</TableCell>
                      <TableCell>
                        {tx.type === "deposit" && <span className="text-green-500">–î–µ–ø–æ–∑–∏—Ç</span>}
                        {tx.type === "withdraw" && <span className="text-red-500">–í—ã–≤–æ–¥</span>}
                        {tx.type === "game" && <span className="text-blue-500">–ò–≥—Ä–∞</span>}
                        {tx.type === "bonus" && <span className="text-purple-500">–ë–æ–Ω—É—Å</span>}
                      </TableCell>
                      <TableCell className={tx.amount > 0 ? "text-green-500" : "text-red-500"}>
                        {tx.amount > 0 ? "+" : ""}{tx.amount} ‚ÇΩ
                      </TableCell>
                      <TableCell>{tx.email}</TableCell>
                      <TableCell>
                        {tx.status === "completed" && <span className="text-green-500">–í—ã–ø–æ–ª–Ω–µ–Ω</span>}
                        {tx.status === "pending" && <span className="text-yellow-500">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</span>}
                        {tx.status === "failed" && <span className="text-red-500">–û—à–∏–±–∫–∞</span>}
                      </TableCell>
                      <TableCell>{formatDate(tx.createdAt)}</TableCell>
                      <TableCell className="text-xs text-gray-400">{tx.details}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </TabsContent>
        </Tabs>
      </main>
      
      <footer className="bg-[#222] py-6 text-center text-sm text-gray-400">
        <div className="container mx-auto">
          <p>¬© 2025 Dice Casino. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </footer>
    </div>
  );
};

export default Admin;
